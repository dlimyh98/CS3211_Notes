#include <queue>
#include <mutex>

struct Job {
    int id;
    int data;
};

// Unbounded queue with enqueue and non-waiting dequeue
class JobQueue {
    std::queue<Job> jobs;
    std::mutex mut;

public:
    // The autogenerated default constructor already calls the default
    // constructor on all its members so we don't need to write our own.
    // JobQueue() : jobs{} {}

    // Threadsafe enqueue
    void enqueue(Job job) {
        std::unique_lock lock(mut);    // more powerful than lock_guard, able to lock/unlock MULTIPLE mutexes at once
        jobs.push(job);
        // destructor for unique_lock will unlock Mutex, RAII!
    }

    // Threadsafe dequeue
    std::optional<Job> try_dequeue() {
        mut.lock();
        if (jobs.empty()) {
            mut.unlock();
            return std::nullopt;
        }
        else {
            Job job = jobs.front();
            jobs.pop();
            mut.unlock();
            return job;
        }
    }
};
